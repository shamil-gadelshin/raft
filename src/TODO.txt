TODO: Features:

Main algorithm:

Recurring:
    .tests
    .rustfmt
    .clippy
    .Rust API Guidelines
    .speed & memory profiling
    .check consensus

Details:
- stability
    .crossbeam recv, send - parse result
    .check channels bounded-unbounded types
    .check channels overflows
    .project timeouts
    .on termination - shutdown communication workers first
    .remove channel.send().expect - handle disconnection error (because of node termination)
- investigate
    .detect faster split votes by counting votes??
    .Check commit index on restart with existing log, should be safe with 0(zero)
    .futures
    .election trait?
    .rebuild raft election as rsm: implement explicit transitions causes (received AppendEntryRequest, HeartbeatWaitingTimeExpired, etc)
- identity
    .generic
    .libp2p
- communication
    .libp2p
- system events logging
    .remove requests from log messages
    .increase log coverage
- error handling
    .communication timeouts
- node example
    .remove node_id from log
    .graceful-shutdown for KILL signals
    .configuration
        .cmd params
        .file (toml?)
- code style
    .introduce aliases (Arc<Mutex<Node<Log>>>)
    .Rust API Guidelines
        .investigate getters
- release
    .check https://opensource.guide/
    .check https://rust-lang-nursery.github.io/api-guidelines/necessities.html#crate-and-its-dependencies-have-a-permissive-license-c-permissive
    .implement Display
    .travis-ci
    .consider #![forbid(missing_docs)]
- debug
    .cases
        .low election timeout
        .low communication timeout
        .check committed only applied to rsm
        .cases description in file
        .election
            .invalid term (stale)
            .with existing log and node_state (term, voted_for)
            .newer term - convert to follower
                .leader
                .candidate
            .incorrect leader sends heartbeats
    .conditional compilation
- user-friendliness
    .readme.md
        .add modules description
        .add test cases description
    .documentation
        .add the top of the main file: #![warn(missing_docs)]
- optimization
    .mutex
        .consider to pass node_id as a copy to reduce mutex locks
        .consider replacing mutex with cas (or RW-lock) for nodes
        .migrate Mutex to parking_lot implementation


Future Features:
- transfer leadership
- cluster membership changes
    .remove server
        .shutdown self
    .add_server
        .TIMEOUT response: replicate log in rounds
- log compaction
    .file snapshot
        .load on start
- client RPC
    .sessions - for duplicate request handling
    .support match_index for node state
    .read query
- rsm
    .persistent
        .load on start
- operation-log
    .add failure reason to AppendEntryResponse
    .park-unpark the send_heartbeat_append_entries thread - remove unnecessary mutex-lock
    .support max AppendEntries number (replicate log in rounds)
- optimization
    .operation_log replication
        .empty (heartbeat) AppendEntries on node's current operation_log index evaluating(reduce 'no prev entry' rounds
    .heartbeat
        .park-unpark the worker thread
    .elections
        .abort election thread on election canceling (changing to Follower by peer requests)


Done:
- support single node
- investigate
    .Replicate State Machine or Rsm?
    .investigate channels faults
    .'static in the 'Log : LogStorage + Sync + Send+ 'static'
    .Arc<dyn Log> to get rid of &static + Send ...
    .worker thread structure: all peer-request thread, client-thread?
    .extract communicator trait
    .timeouts to NodeConfig as separate struct
- leader election
    .check log on votes
- communication
    .change client and node response patterns (after committing to the operation_log)
    .grpc
    .channel communication
    .service discovery for network-communication (peer)
    .tarpc (won't do)
    .client_requests support
        .server api
        .separate client_requests
- modules
    .create
- cluster_membership changes
    .add server
    .change quorum size
- system events logging
    .introduce logging system (remove print_event())
        .response to the client after majority of the servers responses
- operation_log
    .enforce elections timeout (won't do - will depend on communication timeout)
    .persist server's current term and vote and cluster configuration (state persistence)
    .response to the client after majority of the servers responses
    .memory snapshot
    .empty (heartbeat) AppendEntries on node's current operation_log index evaluating
    .not commit entry if quorum fails (clear entry?)
    .transmit full cluster configuration on AddServer Rpc
    .log (instead of Rsm) is responsible for cluster_configuration apply
    .append_entries: respond for no quorum
    .operation_log forced from the leader (clear entries with invalid terms and indices)
    .support max AppendEntries size parameter
- error handling
    .error style
    .de-box errors to RaftError
- project structure
    .library crate
    .exe-project
    .dev-dependencies
        .env-logger
    .raft vs infrastructure module(code) separation
- release
    .graceful-shutdown
    .consider #![warn no_debug)]
    .consider #![forbid(unsafe_code)]
    .check https://opensource.guide/code-of-conduct/
- optimization
    .rayon on nodes requests
    .RW-lock for communicator
    .speed & memory profiling
- debug
    .cases
        .add new separate node, when add to cluster - ensure conversion to follower and log replication
        .no quorum
        .single node
        .operation log
            .basic replication
            .forced replication
        .replicated state machine
        .
- user-friendliness
    .license
    .readme.md
    .documentation
        .comment .proto
- rsm
    .basic support
    .append sync on entry-commit
- node example
    .implement peer network communicator
        .implement service discovery
- code style
    .clear #[allow(dead_code)]
    .investigate & remove use crate:: (won't do)
    .enforce code line length limit